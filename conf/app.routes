# microservice specific routes

GET        /teams                                       uk.gov.hmrc.cataloguefrontend.teams.TeamsController.allTeams(name: Option[String] ?= None)
GET        /teams/:teamName                             uk.gov.hmrc.cataloguefrontend.teams.TeamsController.team(teamName: TeamName)
GET        /digital-services/:digitalService            uk.gov.hmrc.cataloguefrontend.teams.TeamsController.digitalService(digitalService: DigitalService)
GET        /teams/:teamName/out-of-date-dependencies    uk.gov.hmrc.cataloguefrontend.teams.TeamsController.outOfDateTeamDependencies(teamName: TeamName)
POST       /teams/edit-team-details                     uk.gov.hmrc.cataloguefrontend.teams.TeamsController.editTeamDetails(teamName: TeamName, fieldBeingEdited: Option[String])
POST       /teams/remove-user-from-team                 uk.gov.hmrc.cataloguefrontend.teams.TeamsController.removeUserFromTeam(teamName: TeamName)
POST       /teams/add-user-to-team                      uk.gov.hmrc.cataloguefrontend.teams.TeamsController.addUserToTeam(teamName: TeamName)

GET        /create-team                                 uk.gov.hmrc.cataloguefrontend.teams.CreateTeamController.createTeamLanding
POST       /create-team                                 uk.gov.hmrc.cataloguefrontend.teams.CreateTeamController.createTeam

POST       /delete-team/:teamName                       uk.gov.hmrc.cataloguefrontend.teams.TeamsController.deleteTeam(teamName: TeamName)

GET        /repositories                                uk.gov.hmrc.cataloguefrontend.repository.RepositoriesController.allRepositories(name: Option[String] ?= None, team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, showArchived: Option[Boolean] ?= None, repoType: Option[String] ?= None)

GET        /services                                    uk.gov.hmrc.cataloguefrontend.repository.RepositoriesController.allServices
GET        /libraries                                   uk.gov.hmrc.cataloguefrontend.repository.RepositoriesController.allLibraries
GET        /prototypes                                  uk.gov.hmrc.cataloguefrontend.repository.RepositoriesController.allPrototypes

GET        /create-repo                                 uk.gov.hmrc.cataloguefrontend.createrepository.CreateRepositoryController.createRepoLandingGet()
POST       /create-repo                                 uk.gov.hmrc.cataloguefrontend.createrepository.CreateRepositoryController.createRepoLandingPost()
GET        /create-repo/2                               uk.gov.hmrc.cataloguefrontend.createrepository.CreateRepositoryController.createRepoGet()
POST       /create-repo/2                               uk.gov.hmrc.cataloguefrontend.createrepository.CreateRepositoryController.createRepoPost()
GET        /create-repo/3                               uk.gov.hmrc.cataloguefrontend.createrepository.CreateRepositoryController.createRepoConfirmation(repoType: RepoType, repoName: String)

GET        /create-app-configs                          uk.gov.hmrc.cataloguefrontend.createappconfigs.CreateAppConfigsController.createAppConfigsLanding(serviceName: ServiceName)
POST       /create-app-configs                          uk.gov.hmrc.cataloguefrontend.createappconfigs.CreateAppConfigsController.createAppConfigs(serviceName: ServiceName)

GET        /deploy-service                              uk.gov.hmrc.cataloguefrontend.deployments.DeployServiceController.step1(serviceName: Option[ServiceName])
POST       /deploy-service/2                            uk.gov.hmrc.cataloguefrontend.deployments.DeployServiceController.step2()
POST       /deploy-service/3                            uk.gov.hmrc.cataloguefrontend.deployments.DeployServiceController.step3()
GET        /deploy-service/4                            uk.gov.hmrc.cataloguefrontend.deployments.DeployServiceController.step4(serviceName: ServiceName, version: String, environment: String, queueUrl: RedirectUrl, buildUrl: Option[RedirectUrl] ?= None)
GET        /deploy-service/4/sse                        uk.gov.hmrc.cataloguefrontend.deployments.DeployServiceController.step4sse(queueUrl: RedirectUrl, buildUrl: Option[RedirectUrl] ?= None)

GET        /create-user                                 uk.gov.hmrc.cataloguefrontend.users.CreateUserController.createUserLanding(isServiceAccount: Boolean = false)
POST       /create-user                                 uk.gov.hmrc.cataloguefrontend.users.CreateUserController.createUser(isServiceAccount: Boolean = false)
GET        /create-user/2                               uk.gov.hmrc.cataloguefrontend.users.CreateUserController.requestSent(isServiceAccount: Boolean, givenName: String, familyName: String)
GET        /create-service-user                         uk.gov.hmrc.cataloguefrontend.users.CreateUserController.createUserLanding(isServiceAccount: Boolean = true)
POST       /create-service-user                         uk.gov.hmrc.cataloguefrontend.users.CreateUserController.createUser(isServiceAccount: Boolean = true)

GET        /repositories/:name                          uk.gov.hmrc.cataloguefrontend.CatalogueController.repository(name)
POST       /repositories/:name/branch-protection/enable uk.gov.hmrc.cataloguefrontend.CatalogueController.enableBranchProtection(name)
POST       /repositories/:name/mark-for-decommissioning uk.gov.hmrc.cataloguefrontend.CatalogueController.markForDecommissioning(name: ServiceName)

GET        /service/:name                               uk.gov.hmrc.cataloguefrontend.CatalogueController.service(name: ServiceName)
GET        /service/:name/costs                         uk.gov.hmrc.cataloguefrontend.cost.CostController.costEstimation(name: ServiceName)

GET        /service/:name/commissioning-state           uk.gov.hmrc.cataloguefrontend.servicecommissioningstatus.ServiceCommissioningStatusController.getCommissioningState(name: ServiceName)
GET        /commissioning-state/search                  uk.gov.hmrc.cataloguefrontend.servicecommissioningstatus.ServiceCommissioningStatusController.searchLanding()
GET        /commissioning-state/search/results          uk.gov.hmrc.cataloguefrontend.servicecommissioningstatus.ServiceCommissioningStatusController.searchResults(team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, warningFilter: Option[Boolean] ?= None)


GET        /library/:name                               uk.gov.hmrc.cataloguefrontend.CatalogueController.library(name)
GET        /prototype/:name                             uk.gov.hmrc.cataloguefrontend.CatalogueController.prototype(name)
GET        /prototype/:name/change-password             uk.gov.hmrc.cataloguefrontend.CatalogueController.prototype(name)
POST       /prototype/:name/change-password             uk.gov.hmrc.cataloguefrontend.CatalogueController.changePrototypePassword(name)
POST       /prototype/:name/set-status/:status          uk.gov.hmrc.cataloguefrontend.CatalogueController.setPrototypeStatus(name: String, status: PrototypeStatus)
GET        /dependency-repository                       uk.gov.hmrc.cataloguefrontend.CatalogueController.dependencyRepository(group, artefact, version)

GET        /assets/*file                                controllers.Assets.versioned(path="/public", file: Asset)
GET        /                                            uk.gov.hmrc.cataloguefrontend.CatalogueController.index

GET        /sign-in                                     uk.gov.hmrc.cataloguefrontend.auth.AuthController.signIn(targetUrl: Option[RedirectUrl] ?= None)
GET        /post-sign-in                                uk.gov.hmrc.cataloguefrontend.auth.AuthController.postSignIn(targetUrl: Option[RedirectUrl] ?= None)
GET        /sign-out                                    uk.gov.hmrc.cataloguefrontend.auth.AuthController.signOut

GET        /search                                      uk.gov.hmrc.cataloguefrontend.SearchByUrlController.searchLanding
POST       /search                                      uk.gov.hmrc.cataloguefrontend.SearchByUrlController.searchUrl

GET        /dependencies/:name                          uk.gov.hmrc.cataloguefrontend.dependency.DependenciesController.services(name: ServiceName)
GET        /dependencies/:name/:version                 uk.gov.hmrc.cataloguefrontend.dependency.DependenciesController.service(name: ServiceName, version)
GET        /dependencies/:name/:version/graphs          uk.gov.hmrc.cataloguefrontend.dependency.DependenciesController.graphs(name: ServiceName, version, scope: String ?= "compile")

GET        /dependencyexplorer                          uk.gov.hmrc.cataloguefrontend.dependency.DependencyExplorerController.landing
GET        /dependencyexplorer/results                  uk.gov.hmrc.cataloguefrontend.dependency.DependencyExplorerController.search(group: String ?= "", artefact: String ?= "", versionRange: Option[String] ?= None, team: Option[TeamName] ?= None, flag: Option[String] ?= None, `scope[]`: Option[Seq[String]] ?= None, `repoType[]`: Option[Seq[String]] ?= None, asCsv: Boolean ?= false)

GET        /jdkexplorer/environment                     uk.gov.hmrc.cataloguefrontend.JdkVersionController.findLatestVersions(env: String, teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)
GET        /jdkexplorer                                 uk.gov.hmrc.cataloguefrontend.JdkVersionController.compareAllEnvironments(teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)

GET        /sbtexplorer/environment                     uk.gov.hmrc.cataloguefrontend.SbtVersionController.findLatestVersions(env: String, teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)
GET        /sbtexplorer                                 uk.gov.hmrc.cataloguefrontend.SbtVersionController.compareAllEnvironments(teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)

GET        /service/:name/config                        uk.gov.hmrc.cataloguefrontend.serviceconfigs.ServiceConfigsController.configExplorer(name: ServiceName, showWarnings: Boolean ?= false, showReferenceConf: Boolean ?= false)
GET        /config/search                               uk.gov.hmrc.cataloguefrontend.serviceconfigs.ServiceConfigsController.searchLanding()
GET        /config/search/results                       uk.gov.hmrc.cataloguefrontend.serviceconfigs.ServiceConfigsController.searchResults(configKey: Option[String] ?= None)
GET        /config/warnings/search                      uk.gov.hmrc.cataloguefrontend.serviceconfigs.ServiceConfigsController.configWarningLanding()
GET        /config/warnings/search/results              uk.gov.hmrc.cataloguefrontend.serviceconfigs.ServiceConfigsController.configWarningResults()

GET        /cost-explorer                               uk.gov.hmrc.cataloguefrontend.cost.CostController.costExplorer(team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, asCSV: Boolean ?= false)

GET        /bobby-violations                            uk.gov.hmrc.cataloguefrontend.bobby.BobbyExplorerController.bobbyViolations(teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, flag: Option[SlugInfoFlag] ?= None, isActive: Option[Boolean] ?= None)
GET        /bobbyrules                                  uk.gov.hmrc.cataloguefrontend.bobby.BobbyExplorerController.list()
GET        /bobbyrulestrend                             uk.gov.hmrc.cataloguefrontend.bobby.BobbyRulesTrendController.display(`rules[]`: Seq[String] ?= Seq.empty, from: java.time.LocalDate ?= java.time.LocalDate.now().minusYears(2), to: java.time.LocalDate ?= java.time.LocalDate.now())

GET        /pr-commenter/recommendations                uk.gov.hmrc.cataloguefrontend.prcommenter.PrCommenterController.recommendations(name: Option[String] ?= None, teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, commentType: Option[String] ?= None)

GET        /shuttering-overview/:shutterType            uk.gov.hmrc.cataloguefrontend.shuttering.ShutterOverviewController.allStates(shutterType: ShutterType, teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)
GET        /shuttering-overview/:shutterType/:env       uk.gov.hmrc.cataloguefrontend.shuttering.ShutterOverviewController.allStatesForEnv(shutterType: ShutterType, env: Environment, teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)
GET        /frontend-route-warnings/:env/:serviceName   uk.gov.hmrc.cataloguefrontend.shuttering.ShutterOverviewController.frontendRouteWarnings(env: Environment, serviceName: ServiceName)

GET        /shuttering/1                                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step1Get(serviceName: Option[ServiceName], context: Option[String])
POST       /shuttering/1                                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step1Post
GET        /shuttering/2a                               uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step2aGet
POST       /shuttering/2a                               uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step2aPost
GET        /shuttering/2b                               uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step2bGet
GET        /shuttering/preview/:serviceName             uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.outagePagePreview(serviceName: ServiceName, templatedMessage: Option[String] ?= None)
POST       /shuttering/2b                               uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step2bPost
GET        /shuttering/3                                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step3Get
POST       /shuttering/3                                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step3Post
GET        /shuttering/4                                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.step4Get
GET        /shuttering/:shutterType/:env                uk.gov.hmrc.cataloguefrontend.shuttering.ShutterWizardController.start(shutterType: ShutterType, env: Environment, serviceName: Option[ServiceName], context: Option[String])

GET        /shutter-events                              uk.gov.hmrc.cataloguefrontend.shuttering.ShutterEventsController.shutterEvents
GET        /shutter-events/list                         uk.gov.hmrc.cataloguefrontend.shuttering.ShutterEventsController.shutterEventsList(environment: Environment, serviceName: Option[ServiceName] ?= None, limit: Option[Int] ?= None, offset: Option[Int] ?= None)

GET        /whats-running-where        uk.gov.hmrc.cataloguefrontend.whatsrunningwhere.WhatsRunningWhereController.releases(teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)
GET        /deployments/:env           uk.gov.hmrc.cataloguefrontend.deployments.DeploymentEventsController.deploymentEvents(env: Environment)
POST       /deployments/:env/csv      uk.gov.hmrc.cataloguefrontend.deployments.DeploymentEventsController.csv(env: Environment)

GET        /platform-initiatives                        uk.gov.hmrc.cataloguefrontend.platforminitiatives.PlatformInitiativesController.platformInitiatives(display: DisplayType ?= DisplayType.Chart, team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)

GET        /leak-detection                                                 uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.ruleSummaries
GET        /leak-detection/drafts                                          uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.draftReports
GET        /leak-detection/repositories                                    uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.repoSummaries(team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, includeWarnings: Boolean ?= false, includeExemptions: Boolean ?= false, includeViolations: Boolean ?= false, includeNonIssues: Boolean ?= false)
GET        /leak-detection/repositories/:repository                        uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.branchSummaries(repository: String, includeNonIssues: Boolean ?= false)
GET        /leak-detection/repositories/:repository/:branch                uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.report(repository: String, branch: String)
POST       /leak-detection/repositories/:repository/:branch                uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.rescan(repository: String, branch: String)
GET        /leak-detection/repositories/:repository/:branch/exemptions     uk.gov.hmrc.cataloguefrontend.leakdetection.LeakDetectionController.reportExemptions(repository: String, branch: String)

GET        /quicksearch                                                    uk.gov.hmrc.cataloguefrontend.search.SearchController.search(query: String, limit: Int ?= 20)
GET        /deployment-timeline                                            uk.gov.hmrc.cataloguefrontend.deployments.DeploymentTimelineController.graph(service: Option[ServiceName] ?= None, start: java.time.LocalDate ?= java.time.LocalDate.now().minusDays(30), end: java.time.LocalDate ?= java.time.LocalDate.now())
GET        /deployment-timeline-select/:serviceName                        uk.gov.hmrc.cataloguefrontend.deployments.DeploymentTimelineController.graphSelect(serviceName: ServiceName, deploymentId: String, fromDeploymentId: Option[String])

+nocsrf
POST       /audit                                                          uk.gov.hmrc.cataloguefrontend.auditing.BrowserSideAuditingController.sendAudit()

GET        /vulnerabilities                              uk.gov.hmrc.cataloguefrontend.vulnerabilities.VulnerabilitiesController.vulnerabilitiesList(vulnerability: Option[String] ?= None, curationStatus: Option[CurationStatus] ?= None, service: Option[String] ?= None, team: Option[TeamName] ?= None, flag: Option[SlugInfoFlag] ?= None)
GET        /vulnerabilities/services                     uk.gov.hmrc.cataloguefrontend.vulnerabilities.VulnerabilitiesController.vulnerabilitiesForServices(curationStatus: Option[CurationStatus] ?= None, team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, flag: Option[SlugInfoFlag] ?= None)
GET        /vulnerabilities/timeline                     uk.gov.hmrc.cataloguefrontend.vulnerabilities.VulnerabilitiesController.vulnerabilitiesTimeline(service: Option[ServiceName] ?= None, team: Option[TeamName] ?= None, vulnerability: Option[String] ?= None, curationStatus: Option[CurationStatus] ?= None, from: java.time.LocalDate ?= java.time.LocalDate.now().minusMonths(6), to: java.time.LocalDate ?= java.time.LocalDate.now())

GET        /users                                        uk.gov.hmrc.cataloguefrontend.users.UsersController.users
GET        /users-search                                 uk.gov.hmrc.cataloguefrontend.users.UsersController.userSearch(query: String, includeDeleted: Boolean ?= false, includeNonHuman: Boolean ?= false)
GET        /add-user-to-team-search                      uk.gov.hmrc.cataloguefrontend.users.UsersController.addUserToTeamSearch(query: String)
GET        /users/:username                              uk.gov.hmrc.cataloguefrontend.users.UsersController.user(username: UserName)
POST       /users/new-vpn-cert                           uk.gov.hmrc.cataloguefrontend.users.UsersController.requestNewVpnCert

POST       /users/manage-vpn-access                      uk.gov.hmrc.cataloguefrontend.users.UsersController.manageVpnAccess(username: UserName, enableVpn: Boolean)
POST       /users/manage-dev-toolss                      uk.gov.hmrc.cataloguefrontend.users.UsersController.manageDevToolsAccess(username: UserName, enableDevTools: Boolean)

POST       /users/edit-user-details                      uk.gov.hmrc.cataloguefrontend.users.UsersController.updateUserDetails(username: UserName)
POST       /users/edit-user-roles                        uk.gov.hmrc.cataloguefrontend.users.UsersController.updateUserRoles(username: UserName)
GET        /users/edit-user/access                       uk.gov.hmrc.cataloguefrontend.users.EditUserController.editUserLanding(username: UserName, organisation: Option[String] ?= None)
POST       /users/edit-user/access                       uk.gov.hmrc.cataloguefrontend.users.EditUserController.editUserAccess(username: UserName, organisation: Option[String] ?= None)
GET        /users/edit-user/access/2                     uk.gov.hmrc.cataloguefrontend.users.EditUserController.requestSent(username: UserName)
POST       /users/reset-ldap-password                    uk.gov.hmrc.cataloguefrontend.users.UsersController.requestLdapReset(username: UserName)
POST       /users/reset-google-password                  uk.gov.hmrc.cataloguefrontend.users.UsersController.requestGoogleReset(username: UserName)
POST       /users/add-to-github-team                     uk.gov.hmrc.cataloguefrontend.users.UsersController.addToGithubTeam(username: UserName)

GET        /offboard-users                               uk.gov.hmrc.cataloguefrontend.users.UsersController.offBoardUsersLanding
POST       /offboard-users                               uk.gov.hmrc.cataloguefrontend.users.UsersController.offBoardUsers

GET        /tests                                        uk.gov.hmrc.cataloguefrontend.test.TestJobController.allTests(teamName: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)

GET        /service-metrics                              uk.gov.hmrc.cataloguefrontend.servicemetrics.ServiceMetricsController.serviceMetrics(environment: Environment ?= Environment.Production, team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None, metricType: Option[LogMetricId] ?= None)

GET        /service-provision                            uk.gov.hmrc.cataloguefrontend.servicemetrics.ServiceMetricsController.serviceProvision(environment: Environment ?= Environment.Production, team: Option[TeamName] ?= None, digitalService: Option[DigitalService] ?= None)

GET        /health-metrics/timeline                      uk.gov.hmrc.cataloguefrontend.healthmetrics.HealthMetricsController.healthMetricsTimeline(team: TeamName, healthMetric: HealthMetric = HealthMetric.AccessibilityAssessmentViolations, from: java.time.LocalDate ?= java.time.LocalDate.now().minusMonths(6), to: java.time.LocalDate ?= java.time.LocalDate.now())
